// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String        @id @default(cuid())
  name         String
  username     String
  password     String
  image        String?
  createAt     DateTime      @default(now())
  userType     String
  courses      course[]
  user_courses user_course[]
  isApproved   Boolean       @default(false)

  @@unique([username, userType])
}

model course {
  id           String        @id @default(cuid())
  createAt     DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  description  String
  price        Float         @default(0)
  published    Boolean       @default(false)
  image        String // make it optional later
  duration     DateTime?     @db.Time()
  author       user          @relation(fields: [author_id], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  author_id    String        @default("anonymous")
  category     String?
  contents     content[]
  user_courses user_course[]
}

model content {
  id          String    @id @default(cuid())
  createAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  description String?
  type        String
  published   Boolean   @default(false)
  content_url String
  duration    DateTime? @db.Time()
  course      course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id   String

  user_content user_content[]
}

model user_course {
  id             String         @id @default(cuid())
  course_id      String
  course         course         @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_id        String
  user           user           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  completed_date DateTime?
  joined_date    DateTime       @default(now())
  status         String         @default("joined")
  user_contents  user_content[]

  @@unique([course_id, user_id])
}

model user_content {
  id             String      @id @default(cuid())
  user_course_id String
  user_course    user_course @relation(fields: [user_course_id], references: [id], onDelete: Cascade)
  content_id     String
  content        content     @relation(fields: [content_id], references: [id], onDelete: Cascade)
  completed      Boolean     @default(true)

  @@unique([user_course_id, content_id])
}
